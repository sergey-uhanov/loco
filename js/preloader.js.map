{"version":3,"file":"preloader.js","mappings":"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","sources":["webpack://simpl-template/./node_modules/@fluejs/noscroll/dist/shared/noscroll.96a94b32.mjs","webpack://simpl-template/./node_modules/@fluejs/noscroll/dist/index.mjs","webpack://simpl-template/./src/js/preloader.js"],"sourcesContent":["const isBody = (target) => target === document.body;\nconst attrAsSelector = (attr) => `[${attr}]`;\nconst getScrollbarWidth = (target) => {\n  if (isBody(target)) {\n    const documentWidth = document.documentElement.clientWidth;\n    const windowWidth = window.innerWidth;\n    return windowWidth - documentWidth;\n  }\n  const borderLeftWidthSavedValue = target.style.borderLeftWidth;\n  const borderRightWidthSavedValue = target.style.borderRightWidth;\n  target.style.borderLeftWidth = \"0px\";\n  target.style.borderRightWidth = \"0px\";\n  const scrollbarWidth = target.offsetWidth - target.clientWidth;\n  target.style.borderLeftWidth = borderLeftWidthSavedValue;\n  target.style.borderRightWidth = borderRightWidthSavedValue;\n  return scrollbarWidth;\n};\nconst asArray = (data) => {\n  if (Array.isArray(data)) {\n    return data;\n  }\n  return [data];\n};\nfunction throttle(fn, wait) {\n  let inThrottle;\n  let lastFn;\n  let lastTime;\n  return (...args) => {\n    if (!inThrottle) {\n      fn(...args);\n      lastTime = Date.now();\n      inThrottle = true;\n    } else {\n      clearTimeout(lastFn);\n      lastFn = setTimeout(() => {\n        if (Date.now() - lastTime >= wait) {\n          fn(...args);\n          lastTime = Date.now();\n        }\n      }, Math.max(wait - (Date.now() - lastTime), 0));\n    }\n  };\n}\nconst createQueue = (onInit, onReset, onClear) => {\n  let counter = 0;\n  let isInitCalled = false;\n  const init = () => {\n    if (counter <= 0) {\n      onInit();\n      isInitCalled = true;\n    }\n    counter += 1;\n  };\n  const reset = () => {\n    if (counter > 0) {\n      counter -= 1;\n    }\n    if (counter <= 0 && isInitCalled) {\n      onReset();\n    }\n  };\n  const clearAndReset = () => {\n    counter = 0;\n    isInitCalled = false;\n    onClear?.();\n    onReset();\n  };\n  const initIsCalled = () => isInitCalled;\n  return {\n    init,\n    reset,\n    clearAndReset,\n    initIsCalled\n  };\n};\n\nconst NoScrollAttrs = {\n  SCROLL_DISABLED: \"data-noscroll-target-scroll-disabled\",\n  // scrollbar width adjustment for an element with a disabled scrollbar.\n  SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT: \"data-noscroll-target-scroll-scrollbar-width-adjustment\",\n  SCROLLBAR_WIDTH_ADJUSTMENT: \"data-noscroll-target-scrollbar-width-adjustment\",\n  SCROLLABLE: \"data-noscroll-target-scrollable\",\n  GLOBAL_STYLES: \"data-noscroll-global-styles\"\n};\nconst NoScrollCssVars = {\n  TARGET_SCROLLBAR_WIDTH: \"--noscroll-target-scrollbar-width\",\n  TARGET_PADDING_RIGHT: \"--noscroll-target-padding-right\"\n};\nconst DEFAULT_WINDOW_RESIZE_THROTTLE = 200;\n\nexport { DEFAULT_WINDOW_RESIZE_THROTTLE as D, NoScrollAttrs as N, attrAsSelector as a, NoScrollCssVars as b, asArray as c, createQueue as d, getScrollbarWidth as g, throttle as t };\n","import { a as attrAsSelector, N as NoScrollAttrs, b as NoScrollCssVars, t as throttle, D as DEFAULT_WINDOW_RESIZE_THROTTLE, c as asArray, d as createQueue, g as getScrollbarWidth } from './shared/noscroll.96a94b32.mjs';\n\nconst appendGlobalStyles = () => {\n  if (document.querySelector(attrAsSelector(NoScrollAttrs.GLOBAL_STYLES))) {\n    return;\n  }\n  const scrollDisabledSelector = attrAsSelector(NoScrollAttrs.SCROLL_DISABLED);\n  const scrollbarWidthAdjustmentSelector = attrAsSelector(NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT);\n  const scrollScrollbarWidthAdjustmentSelector = attrAsSelector(NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT);\n  const css = `    \n    ${scrollDisabledSelector} {\n        overflow: hidden !important;\n    }\n    \n    ${scrollDisabledSelector} ${scrollbarWidthAdjustmentSelector},\n    ${scrollDisabledSelector}${scrollScrollbarWidthAdjustmentSelector} {\n        padding-right: calc(var(${NoScrollCssVars.TARGET_PADDING_RIGHT}) + var(${NoScrollCssVars.TARGET_SCROLLBAR_WIDTH})) !important;\n    }\n    `;\n  const styleEl = document.createElement(\"style\");\n  styleEl.setAttribute(NoScrollAttrs.GLOBAL_STYLES, \"\");\n  styleEl.appendChild(document.createTextNode(css));\n  document.head.appendChild(styleEl);\n};\n\nconst createNoScroll = (options) => {\n  const adjustScrollbarWidth = (target) => {\n    asArray(target).forEach((el) => {\n      el.removeAttribute(NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT);\n      const computedStyle = window.getComputedStyle(el);\n      el.style.setProperty(NoScrollCssVars.TARGET_PADDING_RIGHT, computedStyle.paddingRight);\n      el.setAttribute(NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT, \"\");\n    });\n  };\n  const removeScrollbarWidthAdjustment = (target) => {\n    asArray(target).forEach((el) => {\n      el.removeAttribute(NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT);\n      el.style.removeProperty(NoScrollCssVars.TARGET_PADDING_RIGHT);\n    });\n  };\n  const adjustScrollScrollbarWidth = (target) => {\n    asArray(target).forEach((el) => {\n      let scrollDisabled = false;\n      el.removeAttribute(NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT);\n      if (el.getAttribute(NoScrollAttrs.SCROLL_DISABLED) !== null) {\n        scrollDisabled = true;\n        el.removeAttribute(NoScrollAttrs.SCROLL_DISABLED);\n      }\n      el.style.setProperty(NoScrollCssVars.TARGET_SCROLLBAR_WIDTH, `${getScrollbarWidth(el)}px`);\n      if (scrollDisabled) {\n        el.setAttribute(NoScrollAttrs.SCROLL_DISABLED, \"\");\n      }\n      const computedStyle = window.getComputedStyle(el);\n      el.style.setProperty(NoScrollCssVars.TARGET_PADDING_RIGHT, computedStyle.paddingRight);\n      el.setAttribute(NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT, \"\");\n    });\n  };\n  const removeScrollScrollbarWidthAdjustment = (target) => {\n    asArray(target).forEach((el) => {\n      el.removeAttribute(NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT);\n      el.style.removeProperty(NoScrollCssVars.TARGET_SCROLLBAR_WIDTH);\n      el.style.removeProperty(NoScrollCssVars.TARGET_PADDING_RIGHT);\n    });\n  };\n  const updateAllScrollbarWidthAdjustment = () => {\n    adjustScrollbarWidth(\n      [...document.querySelectorAll(\n        attrAsSelector(NoScrollAttrs.SCROLLBAR_WIDTH_ADJUSTMENT)\n      )]\n    );\n    adjustScrollScrollbarWidth(\n      [...document.querySelectorAll(\n        attrAsSelector(NoScrollAttrs.SCROLL_SCROLLBAR_WIDTH_ADJUSTMENT)\n      )]\n    );\n  };\n  const handleWindowResize = throttle(\n    updateAllScrollbarWidthAdjustment,\n    options?.windowResizeThrottle ?? DEFAULT_WINDOW_RESIZE_THROTTLE\n  );\n  const {\n    init: initScrollDisable,\n    reset: resetScrollDisable\n  } = createQueue(\n    () => {\n      if (!options?.noHandleWindowResize) {\n        window.addEventListener(\"resize\", handleWindowResize);\n      }\n      options?.onInitScrollDisable?.();\n    },\n    () => {\n      if (!options?.noHandleWindowResize) {\n        window.removeEventListener(\"resize\", handleWindowResize);\n      }\n      options?.onResetScrollDisable?.();\n    }\n  );\n  const disableScroll = (target, {\n    scrollbarWidthAdjustment = true\n  } = {}) => {\n    appendGlobalStyles();\n    initScrollDisable();\n    options?.onScrollDisable?.(target);\n    if (scrollbarWidthAdjustment) {\n      adjustScrollScrollbarWidth(target);\n    }\n    target.setAttribute(NoScrollAttrs.SCROLL_DISABLED, \"\");\n  };\n  const enableScroll = (target) => {\n    if (target.getAttribute(NoScrollAttrs.SCROLL_DISABLED) === null) {\n      return;\n    }\n    resetScrollDisable();\n    options?.onScrollEnable?.(target);\n    removeScrollScrollbarWidthAdjustment(target);\n    target.removeAttribute(NoScrollAttrs.SCROLL_DISABLED);\n  };\n  const {\n    init: disablePageScroll,\n    reset: enablePageScroll,\n    initIsCalled: pageScrollIsDisabled\n  } = createQueue(\n    () => disableScroll(document.body),\n    () => enableScroll(document.body)\n  );\n  const createPageScrollToggler = () => {\n    let isDisabled = false;\n    const toggler = {\n      disablePageScroll() {\n        if (isDisabled) {\n          return;\n        }\n        disablePageScroll();\n        isDisabled = true;\n      },\n      enablePageScroll() {\n        if (!isDisabled) {\n          return;\n        }\n        enablePageScroll();\n        isDisabled = false;\n      },\n      togglePageScroll() {\n        if (isDisabled) {\n          toggler.enablePageScroll();\n        } else {\n          toggler.disablePageScroll();\n        }\n      }\n    };\n    return toggler;\n  };\n  const markScrollable = (target) => {\n    asArray(target).forEach((el) => {\n      el.setAttribute(NoScrollAttrs.SCROLLABLE, \"\");\n    });\n  };\n  const unmarkScrollable = (target) => {\n    asArray(target).forEach((el) => {\n      el.removeAttribute(NoScrollAttrs.SCROLLABLE);\n    });\n  };\n  return {\n    adjustScrollbarWidth,\n    removeScrollbarWidthAdjustment,\n    updateAllScrollbarWidthAdjustment,\n    disableScroll,\n    enableScroll,\n    disablePageScroll,\n    enablePageScroll,\n    pageScrollIsDisabled,\n    createPageScrollToggler,\n    markScrollable,\n    unmarkScrollable\n  };\n};\n\nconst {\n  adjustScrollbarWidth,\n  removeScrollbarWidthAdjustment,\n  updateAllScrollbarWidthAdjustment,\n  disableScroll,\n  enableScroll,\n  disablePageScroll,\n  enablePageScroll,\n  pageScrollIsDisabled,\n  createPageScrollToggler,\n  markScrollable,\n  unmarkScrollable\n} = createNoScroll();\n\nexport { NoScrollAttrs, NoScrollCssVars, adjustScrollbarWidth, createNoScroll, createPageScrollToggler, disablePageScroll, disableScroll, enablePageScroll, enableScroll, markScrollable, pageScrollIsDisabled, removeScrollbarWidthAdjustment, unmarkScrollable, updateAllScrollbarWidthAdjustment };\n","import {disablePageScroll, enablePageScroll} from '@fluejs/noscroll';\r\n\r\n\r\nconst preloaderNum = document.querySelector('.preloader__number');\r\nconst preloader = document.querySelector('.preloader');\r\n\r\nlet progress = 0;\r\n\r\ndisablePageScroll();\r\n\r\nconst interval = setInterval(() => {\r\n    progress += 1;\r\n    preloaderNum.textContent = ` ${progress}%`;\r\n\r\n    if (progress === 100) {\r\n        clearInterval(interval);\r\n    }\r\n}, 50);\r\n\r\n\r\nwindow.addEventListener('load', () => {\r\n    clearInterval(interval);\r\n    preloaderNum.textContent = 'LIGHT';\r\n\r\n    setTimeout(() => {\r\n        preloader.style.display = 'none';\r\n        enablePageScroll();\r\n    }, 1000);\r\n});\r\n"],"names":["attrAsSelector","attr","asArray","data","Array","isArray","createQueue","onInit","onReset","onClear","counter","isInitCalled","init","reset","clearAndReset","initIsCalled","NoScrollAttrs","NoScrollCssVars","adjustScrollbarWidth","removeScrollbarWidthAdjustment","updateAllScrollbarWidthAdjustment","disableScroll","enableScroll","disablePageScroll","enablePageScroll","pageScrollIsDisabled","createPageScrollToggler","markScrollable","unmarkScrollable","options","target","forEach","el","removeAttribute","computedStyle","window","getComputedStyle","style","setProperty","paddingRight","setAttribute","adjustScrollScrollbarWidth","scrollDisabled","getAttribute","document","body","isBody","documentWidth","documentElement","clientWidth","innerWidth","borderLeftWidthSavedValue","borderLeftWidth","borderRightWidthSavedValue","borderRightWidth","scrollbarWidth","offsetWidth","getScrollbarWidth","querySelectorAll","handleWindowResize","fn","inThrottle","lastFn","lastTime","args","clearTimeout","setTimeout","Date","now","Math","max","throttle","initScrollDisable","resetScrollDisable","addEventListener","onInitScrollDisable","removeEventListener","onResetScrollDisable","scrollbarWidthAdjustment","querySelector","scrollDisabledSelector","css","styleEl","createElement","appendChild","createTextNode","head","appendGlobalStyles","onScrollDisable","onScrollEnable","removeProperty","removeScrollScrollbarWidthAdjustment","isDisabled","toggler","togglePageScroll","createNoScroll","preloaderNum","preloader","progress","interval","setInterval","textContent","concat","clearInterval","display"],"sourceRoot":""}